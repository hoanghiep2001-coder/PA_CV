// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - name: normal
    passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
  - name: normal_premul
    passes:
    - vert: vs_premul
      frag: fs
      blendState:
        targets:
        - blend: true
          blendSrc: one
          blendDst: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
  - name: add
    passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
  - name: add_premul
    passes:
    - vert: vs_premul
      frag: fs
      blendState:
        targets:
        - blend: true
          blendSrc: one
          blendDst: one
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
  - name: multiply
    passes:
    - vert: vs
      frag: fs_multiply
      blendState:
        targets:
        - blend: true
          blendSrc: dst_color
          blendDst: zero
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
  - name: multiply_premul
    passes:
    - vert: vs
      frag: fs_multiply_premul
      blendState:
        targets:
        - blend: true
          blendSrc: dst_color
          blendDst: zero
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  uniform NEUTRINO {
    mat4 worldParentMat;
  };

  in vec3 a_position;
  in vec4 a_color;
  in vec2 a_uv0;
  
  out vec4 v_color;
  out vec2 v_uv0;

  void main () {
    vec4 pos = vec4(a_position, 1);
    pos = cc_matViewProj * (worldParentMat * pos);
    v_uv0 = a_uv0;
    v_color = a_color;
    gl_Position = pos;
  }
}%

CCProgram vs_premul %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  uniform NEUTRINO {
    mat4 worldParentMat;
  };

  in vec3 a_position;
  in vec4 a_color;
  in vec2 a_uv0;
  
  out vec4 v_color;
  out vec2 v_uv0;

  void main () {
    vec4 pos = vec4(a_position, 1);
    pos = cc_matViewProj * (worldParentMat * pos);
    v_uv0 = a_uv0;
    v_color = vec4(a_color.rgb * a_color.a, a_color.a);
    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <texture>

  in vec4 v_color;
  in vec2 v_uv0;
  uniform sampler2D texture;

  void main () {
    vec4 o = vec4(1, 1, 1, 1);
    CCTexture(texture, v_uv0, o);
    o *= v_color;
    gl_FragColor = o;
  }
}%

CCProgram fs_multiply %{
  precision highp float;
  
  #include <texture>

  in vec4 v_color;
  in vec2 v_uv0;
  uniform sampler2D texture;

  void main () {
    vec4 tex = vec4(1, 1, 1, 1);
    CCTexture(texture, v_uv0, tex);
    float alpha = tex.a * v_color.a;
    vec3 color = mix(vec3(1, 1, 1), v_color.rgb * tex.rgb, alpha);
    gl_FragColor = vec4(color, alpha);
  }
}%

CCProgram fs_multiply_premul %{
  precision highp float;
  
  #include <texture>

  in vec4 v_color;
  in vec2 v_uv0;
  uniform sampler2D texture;

  void main () {
    vec4 tex = vec4(1, 1, 1, 1);
    CCTexture(texture, v_uv0, tex);

    float alpha = tex.a * v_color.a;

    if (tex.a < 0.01)
    {
      gl_FragColor = vec4(1, 1, 1, 0);
    }
    else
    {
      vec3 texColor = tex.rgb / tex.a; 
      vec3 color = mix(vec3(1, 1, 1), v_color.rgb * texColor, alpha);
      gl_FragColor = vec4(color, alpha);
    }
  }
}%
